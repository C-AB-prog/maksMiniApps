// api/chat.js
// –£–º–Ω—ã–π —á–∞—Ç –¥–ª—è Growth Assistant: –∏–Ω—Ç–µ–Ω—Ç—ã + –≤—ã–∑–æ–≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API.
// –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY (—É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å).

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', 'POST');
    return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
  }

  try {
    const { text, message, tg_id } = await readJson(req);
    const userText = (text || message || '').toString().trim();
    if (!userText) return res.status(400).json({ ok: false, error: 'Empty message' });

    // –û–ø—Ä–µ–¥–µ–ª–∏–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
    const proto = (req.headers['x-forwarded-proto'] || 'https').toString();
    const host = (req.headers['x-forwarded-host'] || req.headers.host || '').toString();
    const baseUrl = `${proto}://${host}`;

    // Telegram ID –±–µ—Ä—ë–º –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-TG-ID –∏–ª–∏ —Ç–µ–ª–∞
    const tgIdHeader = (req.headers['x-tg-id'] || '').toString();
    const tgId = (tg_id || tgIdHeader || '').toString();

    // 1) –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ç–µ–Ω—Ç ¬´–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É / —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å / –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å¬ª
    const intent = await extractIntent(userText);

    // 2) –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (intent.action === 'add_task' && intent.title) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–¥–ª–∞–π–Ω (ms) –µ—Å–ª–∏ –µ—Å—Ç—å
      const due_ts = Number.isFinite(intent.due_ts) ? intent.due_ts : null;
      try {
        const r = await fetch(`${baseUrl}/api/tasks`, {
          method: 'POST',
          headers: headersJson(tgId),
          body: JSON.stringify({ title: intent.title, due_ts })
        });
        if (!r.ok) throw new Error(await safeErr(r));
        const j = await r.json().catch(() => ({}));
        const when = due_ts ? ' (–¥–µ–¥–ª–∞–π–Ω: ' + fmtDate(due_ts) + ')' : '';
        const reply = `–ì–æ—Ç–æ–≤–æ: –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É ¬´${j?.task?.title || intent.title}¬ª${when}.`;
        return res.status(200).json({ ok: true, reply });
      } catch (e) {
        // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–≤–µ—Ç–∏–º
        const when = intent.due_ts ? ' –∫ ' + fmtDate(intent.due_ts) : '';
        return res.status(200).json({
          ok: true,
          reply: `–ü–æ–Ω—è–ª, –¥–æ–±–∞–≤–ª—é –∑–∞–¥–∞—á—É ¬´${intent.title}¬ª${when}. –°–µ–π—á–∞—Å —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.`
        });
      }
    }

    if (intent.action === 'set_focus' && intent.focus_text) {
      try {
        const r = await fetch(`${baseUrl}/api/focus`, {
          method: 'POST',
          headers: headersJson(tgId),
          body: JSON.stringify({ text: intent.focus_text })
        });
        if (!r.ok) throw new Error(await safeErr(r));
        await r.json().catch(() => ({}));
        const reply = `–§–æ–∫—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: ¬´${intent.focus_text}¬ª. –î–µ—Ä–∂—É —Ç–µ–±—è –≤ —Ç–æ–Ω—É—Å–µ!`;
        return res.status(200).json({ ok: true, reply });
      } catch (e) {
        return res.status(200).json({
          ok: true,
          reply: `–§–æ–∫—É—Å —Ö–æ—á—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ ¬´${intent.focus_text}¬ª, –Ω–æ —Å–µ—Ä–≤–µ—Ä —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.`
        });
      }
    }

    // 3) –ï—Å–ª–∏ —è–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º LLM –¥–∞—Ç—å —É–º–Ω—ã–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç/–ø–ª–∞–Ω
    const reply = await llmPlanReply(userText);
    return res.status(200).json({ ok: true, reply });

  } catch (e) {
    // –§–æ–ª–ª–±—ç–∫: –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—á–∞–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏
    return res.status(200).json({
      ok: true,
      reply: `–Ø –Ω–µ–º–Ω–æ–≥–æ –∑–∞–¥—É–º–∞–ª—Å—è üòÖ –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ: ¬´–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É ... –∑–∞–≤—Ç—Ä–∞ –≤ 15:00¬ª –∏–ª–∏ ¬´–ø–æ—Å—Ç–∞–≤—å —Ñ–æ–∫—É—Å ...¬ª.`
    });
  }
}

/* ========================= Helpers ========================= */

function headersJson(tgId) {
  const h = { 'Content-Type': 'application/json' };
  if (tgId) h['X-TG-ID'] = String(tgId);
  return h;
}

async function readJson(req) {
  try {
    const buf = await getRawBody(req);
    return JSON.parse(buf.toString('utf8') || '{}');
  } catch {
    return {};
  }
}

function getRawBody(req) {
  return new Promise((resolve, reject) => {
    const chunks = [];
    req.on('data', (c) => chunks.push(c));
    req.on('end', () => resolve(Buffer.concat(chunks)));
    req.on('error', reject);
  });
}

async function safeErr(r) {
  try { const j = await r.json(); return j?.error || `${r.status}`; }
  catch { return `${r.status}`; }
}

function fmtDate(ms) {
  try {
    return new Date(ms).toLocaleString('ru-RU', { day:'2-digit', month:'2-digit', hour:'2-digit', minute:'2-digit' });
  } catch { return ''; }
}

/* ====== 1) –ò–Ω—Ç–µ–Ω—Ç-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI ====== */

async function extractIntent(userText) {
  // –ë—ã—Å—Ç—Ä—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ LLM (—É–¥–µ—à–µ–≤–ª—è–µ–º –∏ —É—Å–∫–æ—Ä—è–µ–º):
  const t = userText.toLowerCase();
  // –ü—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
  if (/^(–¥–æ–±–∞–≤(—å|–∏—Ç—å)|—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å)\s+–∑–∞–¥–∞—á[–∞—É—ã]/.test(t)) {
    return { action: 'add_task', title: stripVerb(userText), due_ts: tryParseDue(userText) };
  }
  if (/^(—Ñ–æ–∫—É—Å|–ø–æ—Å—Ç–∞–≤—å —Ñ–æ–∫—É—Å|–æ–±–Ω–æ–≤–∏ —Ñ–æ–∫—É—Å)/.test(t)) {
    return { action: 'set_focus', focus_text: stripFocus(userText) };
  }

  // –ò–Ω–∞—á–µ ‚Äî —Å–ø—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å –Ω–∞ JSON
  const apiKey = process.env.OPENAI_API_KEY || '';
  if (!apiKey) return { action: 'reply' };

  const OpenAI = (await import('openai')).default;
  const openai = new OpenAI({ apiKey });

  const sys = [
    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:",
    `{ "action": "add_task|set_focus|reply", "title": "...", "due_ts": 0, "focus_text": "..." }`,
    "–ï—Å–ª–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É ‚Äî –∑–∞–ø–æ–ª–Ω–∏ title (–∫–∞—Ä–æ—Ç–∫–æ), due_ts (UNIX ms) –µ—Å–ª–∏ –ø–æ–Ω–∏–º–∞–µ—à—å —Å—Ä–æ–∫, –∏–Ω–∞—á–µ 0.",
    "–ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç —Ñ–æ–∫—É—Å ‚Äî –∑–∞–ø–æ–ª–Ω–∏ focus_text (–∫—Ä–∞—Ç–∫–æ).",
    "–ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî action=reply –∏ –æ–ø–∏—à–∏ –∫–∞–∫ –ø–æ–º–æ—á—å –∫–æ—Ä–æ—Ç–∫–æ."
  ].join('\n');

  const user = `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: """${userText}"""\n–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON.`;

  let parsed = { action: 'reply' };
  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      temperature: 0.2,
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: sys },
        { role: 'user', content: user }
      ]
    });
    const raw = r.choices?.[0]?.message?.content || '{}';
    parsed = JSON.parse(raw);
  } catch { /* fallback –Ω–∏–∂–µ */ }

  // –û—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
  if (parsed.action === 'add_task') {
    parsed.title = (parsed.title || '').toString().trim() || guessTitle(userText);
    const modelDue = Number(parsed.due_ts || 0);
    parsed.due_ts = Number.isFinite(modelDue) && modelDue > 0 ? modelDue : tryParseDue(userText);
  }
  if (parsed.action === 'set_focus') {
    parsed.focus_text = (parsed.focus_text || '').toString().trim() || guessFocus(userText);
  }
  if (!parsed.action) parsed.action = 'reply';
  return parsed;
}

function stripVerb(s) {
  // ¬´–î–æ–±–∞–≤—å/–°–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É ...¬ª -> –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –≥–ª–∞–≥–æ–ª–∞ –∏ —Å–ª–æ–≤–∞ "–∑–∞–¥–∞—á—É"
  return s.replace(/^(–¥–æ–±–∞–≤(—å|–∏—Ç—å)|—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å)\s+–∑–∞–¥–∞—á[–∞—É—ã]\s*/i, '').trim();
}
function stripFocus(s) {
  // ¬´–§–æ–∫—É—Å ...¬ª / ¬´–ü–æ—Å—Ç–∞–≤—å —Ñ–æ–∫—É—Å ...¬ª -> —Ç–µ–∫—Å—Ç
  return s.replace(/^(–ø–æ—Å—Ç–∞–≤(—å|–∏—Ç—å)\s+)?—Ñ–æ–∫—É—Å( –¥–Ω—è)?\s*[:-]?\s*/i, '').trim();
}
function guessTitle(s) { return s.trim().slice(0, 120); }
function guessFocus(s) { return s.trim().slice(0, 160); }

/* –ü—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ (RU): —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ + ¬´–≤ 15:30¬ª/¬´–∫ 18:00¬ª */
function tryParseDue(text) {
  const t = text.toLowerCase();
  const now = new Date();
  let base = new Date(now);

  if (/\b—Å–µ–≥–æ–¥–Ω—è\b/.test(t)) base = new Date(now);
  else if (/\b–∑–∞–≤—Ç—Ä–∞\b/.test(t)) base = addDaysLocal(now, 1);
  else if (/\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b/.test(t)) base = addDaysLocal(now, 2);
  else {
    // –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ø–Ω..–≤—Å)
    const dow = ['–≤—Å','–ø–Ω','–≤—Ç','—Å—Ä','—á—Ç','–ø—Ç','—Å–±'];
    const map = { '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':'–ø–Ω','–≤—Ç–æ—Ä–Ω–∏–∫':'–≤—Ç','—Å—Ä–µ–¥–∞':'—Å—Ä','—á–µ—Ç–≤–µ—Ä–≥':'—á—Ç','–ø—è—Ç–Ω–∏—Ü–∞':'–ø—Ç','—Å—É–±–±–æ—Ç–∞':'—Å–±','–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':'–≤—Å' };
    let target = null;
    for (const w of Object.keys(map)) if (t.includes(w)) target = map[w];
    if (!target) for (const d of dow) if (new RegExp(`\\b${d}\\b`).test(t)) target = d;

    if (target) {
      const cur = now.getDay();                    // 0..6 (–≤—Å..—Å–±)
      const idx = dow.indexOf(target);             // 0..6
      let diff = idx - cur;
      if (diff <= 0) diff += 7;
      base = addDaysLocal(now, diff);
    }
  }

  // –≤—Ä–µ–º—è ¬´–≤ 15:30¬ª –∏–ª–∏ ¬´–∫ 18:00¬ª
  const m = t.match(/\b(?:–≤|–∫)\s*(\d{1,2})(?::(\d{2}))?\b/);
  if (m) {
    const hh = clamp(parseInt(m[1], 10), 0, 23);
    const mm = clamp(parseInt(m[2] || '0', 10), 0, 59);
    base.setHours(hh, mm, 0, 0);
  } else {
    // –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–Ω–µ–¥–µ–ª—è¬ª –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Å—Ç–∞–≤–∏–º 19:00
    if (/\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b/.test(t)) base.setHours(19, 0, 0, 0);
  }
  return base.getTime();

  function addDaysLocal(d, n) { const x = new Date(d); x.setDate(x.getDate() + n); return x; }
  function clamp(n, a, b){ return Math.max(a, Math.min(b, n)); }
}

/* ====== 2) –ö–æ—Ä–æ—Ç–∫–∏–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç-–ø–ª–∞–Ω ====== */
async function llmPlanReply(userText) {
  const apiKey = process.env.OPENAI_API_KEY || '';
  if (!apiKey) {
    // –ë–µ–∑ –∫–ª—é—á–∞ ‚Äî –ª–µ–≥–∫–∏–π –æ—Ñ—Ñ–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç
    return `–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –Ω–∞ —à–∞–≥–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π: —Ü–µ–ª—å, —Å—Ä–æ–∫ –∏ 3‚Äì5 –ø–æ–¥–∑–∞–¥–∞—á ‚Äî —è –ø—Ä–µ–≤—Ä–∞—â—É —ç—Ç–æ –≤ –∑–∞–¥–∞—á–∏ –∏ —Ñ–æ–∫—É—Å.`;
  }

  const OpenAI = (await import('openai')).default;
  const openai = new OpenAI({ apiKey });

  const sys = [
    "–¢—ã –¥–µ–ª–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: 1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç (–¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤).",
    "–ò–∑–±–µ–≥–∞–π –≤–æ–¥—ã; –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –¥–µ–¥–ª–∞–π–Ω—ã."
  ].join('\n');

  const r = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    temperature: 0.3,
    messages: [
      { role: 'system', content: sys },
      { role: 'user', content: userText }
    ]
  });

  const out = r.choices?.[0]?.message?.content?.trim();
  return out || '–ì–æ—Ç–æ–≤–æ.';
}
