// api/chat.js
// –£–º–Ω—ã–π —á–∞—Ç –¥–ª—è Growth Assistant: –∏–Ω—Ç–µ–Ω—Ç—ã + –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏/—Ñ–æ–∫—É—Å–æ–º.
// –¢—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel.

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', 'POST');
    return res.status(405).json({ ok: false, error: 'Method Not Allowed' });
  }

  try {
    const { text, message, tg_id } = await readJson(req);
    const userText = (text || message || '').toString().trim();
    if (!userText) return res.status(400).json({ ok: false, error: 'Empty message' });

    // –ë–∞–∑–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
    const proto = (req.headers['x-forwarded-proto'] || 'https').toString();
    const host  = (req.headers['x-forwarded-host']  || req.headers.host || '').toString();
    const baseUrl = `${proto}://${host}`;

    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tgIdHeader = (req.headers['x-tg-id'] || '').toString();
    const tgId = (tg_id || tgIdHeader || '').toString();

    // 1) –ò–∑–≤–ª–µ—á—å –∏–Ω—Ç–µ–Ω—Ç
    const intent = await extractIntent(userText);

    // 2) –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    if (intent.action === 'add_task' && intent.title) {
      const due_ts = Number.isFinite(intent.due_ts) ? intent.due_ts : null;
      return await doAddTask(res, baseUrl, tgId, intent.title, due_ts);
    }

    if (intent.action === 'set_focus' && intent.focus_text) {
      return await doSetFocus(res, baseUrl, tgId, intent.focus_text);
    }

    if (intent.action === 'list_tasks') {
      const period = intent.period || guessPeriod(userText);
      return await doListTasks(res, baseUrl, tgId, period);
    }

    if (intent.action === 'delete_task' && intent.query) {
      return await doDeleteTask(res, baseUrl, tgId, intent.query);
    }

    if (intent.action === 'complete_task' && intent.query) {
      return await doCompleteTask(res, baseUrl, tgId, intent.query);
    }

    // 3) –ò–Ω–∞—á–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç/–ø–ª–∞–Ω
    const reply = await llmPlanReply(userText);
    return res.status(200).json({ ok: true, reply });

  } catch (e) {
    return res.status(200).json({
      ok: true,
      reply: `–Ø –Ω–∞ —Å–µ–∫—É–Ω–¥—É –∑–∞–¥—É–º–∞–ª—Å—è üòÖ –ù–∞–ø–∏—à–∏: ¬´–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É ‚Ä¶ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00¬ª, ¬´–ø–æ—Å—Ç–∞–≤—å —Ñ–æ–∫—É—Å ‚Ä¶¬ª, ¬´–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é¬ª, ¬´—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É ‚Ä¶¬ª.`
    });
  }
}

/* ========================= –î–ï–ô–°–¢–í–ò–Ø ========================= */

async function doAddTask(res, baseUrl, tgId, title, due_ts) {
  try {
    const r = await fetch(`${baseUrl}/api/tasks`, {
      method: 'POST',
      headers: headersJson(tgId),
      body: JSON.stringify({ title, due_ts: due_ts ?? null })
    });
    if (!r.ok) throw new Error(await safeErr(r));
    const j = await r.json().catch(() => ({}));
    const when = due_ts ? ` (–¥–µ–¥–ª–∞–π–Ω: ${fmtDate(due_ts)})` : '';
    return res.status(200).json({ ok: true, reply: `–ì–æ—Ç–æ–≤–æ: –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É ¬´${j?.task?.title || title}¬ª${when}.` });
  } catch (e) {
    const when = due_ts ? ` –∫ ${fmtDate(due_ts)}` : '';
    return res.status(200).json({
      ok: true,
      reply: `–ü–æ–Ω—è–ª, –¥–æ–±–∞–≤–ª—é –∑–∞–¥–∞—á—É ¬´${title}¬ª${when}. –°–µ–π—á–∞—Å —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.`
    });
  }
}

async function doSetFocus(res, baseUrl, tgId, focus_text) {
  try {
    const r = await fetch(`${baseUrl}/api/focus`, {
      method: 'POST',
      headers: headersJson(tgId),
      body: JSON.stringify({ text: focus_text })
    });
    if (!r.ok) throw new Error(await safeErr(r));
    await r.json().catch(() => ({}));
    return res.status(200).json({ ok: true, reply: `–§–æ–∫—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: ¬´${focus_text}¬ª. –î–µ—Ä–∂—É —Ç–µ–±—è –≤ —Ç–æ–Ω—É—Å–µ!` });
  } catch (e) {
    return res.status(200).json({
      ok: true,
      reply: `–§–æ–∫—É—Å —Ö–æ—á—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ ¬´${focus_text}¬ª, –Ω–æ —Å–µ—Ä–≤–µ—Ä —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.`
    });
  }
}

async function doListTasks(res, baseUrl, tgId, period = 'today') {
  try {
    const items = await fetchTasks(baseUrl, tgId);
    const now = Date.now();
    const range = calcRange(period);
    let filtered = items;

    if (period === 'backlog') {
      filtered = items.filter(t => t.due_ts == null);
    } else if (period === 'overdue') {
      filtered = items.filter(t => t.due_ts != null && t.due_ts < now && !t.is_done);
    } else if (range) {
      filtered = items.filter(t => t.due_ts != null && t.due_ts >= range.start && t.due_ts <= range.end);
    }

    filtered.sort((a,b)=>(a.is_done - b.is_done)||((a.due_ts ?? 1e18)-(b.due_ts ?? 1e18)));
    const reply = formatTasksList(filtered, period);
    return res.status(200).json({ ok: true, reply });
  } catch (e) {
    return res.status(200).json({ ok: true, reply: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.` });
  }
}

async function doDeleteTask(res, baseUrl, tgId, query) {
  try {
    const items = await fetchTasks(baseUrl, tgId);
    const found = fuzzyFind(items, query);

    if (found.length === 0) {
      return res.status(200).json({ ok: true, reply: `–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´${query}¬ª.` });
    }
    if (found.length > 1) {
      const sample = found.slice(0, 5).map(t => `‚Ä¢ ${t.title}`).join('\n');
      return res.status(200).json({
        ok: true,
        reply: `–ù–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á:\n${sample}\n–£—Ç–æ—á–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.` 
      });
    }

    const t = found[0];
    try {
      const r = await fetch(`${baseUrl}/api/tasks/delete?id=${encodeURIComponent(t.id)}`, {
        method: 'POST',
        headers: headersJson(tgId),
        body: JSON.stringify({})
      });
      if (!r.ok) throw new Error(await safeErr(r));
      await r.json().catch(()=> ({}));
      return res.status(200).json({ ok: true, reply: `–£–¥–∞–ª–∏–ª: ¬´${t.title}¬ª.` });
    } catch {
      return res.status(200).json({ ok: true, reply: `–•–æ—Ç–µ–ª —É–¥–∞–ª–∏—Ç—å ¬´${t.title}¬ª, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.` });
    }
  } catch {
    return res.status(200).json({ ok: true, reply: `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.` });
  }
}

async function doCompleteTask(res, baseUrl, tgId, query) {
  try {
    const items = await fetchTasks(baseUrl, tgId);
    const found = fuzzyFind(items, query);

    if (found.length === 0) {
      return res.status(200).json({ ok: true, reply: `–ù–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´${query}¬ª.` });
    }
    if (found.length > 1) {
      const sample = found.slice(0, 5).map(t => `‚Ä¢ ${t.title}${t.is_done?' (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)':''}`).join('\n');
      return res.status(200).json({
        ok: true,
        reply: `–ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:\n${sample}\n–£—Ç–æ—á–Ω–∏ —Ç–æ—á–Ω–µ–µ, –∫–∞–∫—É—é –∑–∞–∫—Ä—ã—Ç—å.`
      });
    }

    const t = found[0];
    if (t.is_done) {
      return res.status(200).json({ ok: true, reply: `–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ¬´${t.title}¬ª.` });
    }
    try {
      const r = await fetch(`${baseUrl}/api/tasks/toggle?id=${encodeURIComponent(t.id)}`, {
        method: 'POST',
        headers: headersJson(tgId),
        body: JSON.stringify({})
      });
      if (!r.ok) throw new Error(await safeErr(r));
      await r.json().catch(()=> ({}));
      return res.status(200).json({ ok: true, reply: `–û—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: ¬´${t.title}¬ª.` });
    } catch {
      return res.status(200).json({ ok: true, reply: `–•–æ—Ç–µ–ª –∑–∞–∫—Ä—ã—Ç—å ¬´${t.title}¬ª, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.` });
    }
  } catch {
    return res.status(200).json({ ok: true, reply: `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.` });
  }
}

/* ========================= HELPERS ========================= */

function headersJson(tgId) {
  const h = { 'Content-Type': 'application/json' };
  if (tgId) h['X-TG-ID'] = String(tgId);
  return h;
}

async function readJson(req) {
  try {
    const buf = await getRawBody(req);
    return JSON.parse(buf.toString('utf8') || '{}');
  } catch {
    return {};
  }
}

function getRawBody(req) {
  return new Promise((resolve, reject) => {
    const chunks = [];
    req.on('data', (c) => chunks.push(c));
    req.on('end', () => resolve(Buffer.concat(chunks)));
    req.on('error', reject);
  });
}

async function safeErr(r) {
  try { const j = await r.json(); return j?.error || `${r.status}`; }
  catch { return `${r.status}`; }
}

function fmtDate(ms) {
  try {
    return new Date(ms).toLocaleString('ru-RU', { day:'2-digit', month:'2-digit', hour:'2-digit', minute:'2-digit' });
  } catch { return ''; }
}

function startOfDay(d) { const x = new Date(d); x.setHours(0,0,0,0); return x.getTime(); }
function endOfDay(d)   { const x = new Date(d); x.setHours(23,59,59,999); return x.getTime(); }

function addDays(ts, n) { const x = new Date(ts); x.setDate(x.getDate()+n); return x.getTime(); }

function calcRange(period) {
  const now = Date.now();
  if (period === 'today') {
    return { start: startOfDay(now), end: endOfDay(now) };
  }
  if (period === 'tomorrow') {
    const t = addDays(now, 1);
    return { start: startOfDay(t), end: endOfDay(t) };
  }
  if (period === 'week') {
    return { start: startOfDay(now), end: endOfDay(addDays(now, 7)) };
  }
  // –¥–ª—è backog/overdue/all ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
  return null;
}

function guessPeriod(t) {
  const s = (t || '').toLowerCase();
  if (/\b—Å–µ–≥–æ–¥–Ω—è\b/.test(s)) return 'today';
  if (/\b–∑–∞–≤—Ç—Ä–∞\b/.test(s)) return 'tomorrow';
  if (/\b–Ω–µ–¥–µ–ª(—é|—è|–µ)\b/.test(s)) return 'week';
  if (/\b–ø—Ä–æ—Å—Ä–æ—á|overdue\b/.test(s)) return 'overdue';
  if (/\b–±—ç–∫–ª–æ–≥|backlog\b/.test(s)) return 'backlog';
  if (/\b–≤—Å–µ\b/.test(s)) return 'all';
  return 'today';
}

function formatTasksList(items, period) {
  if (!items.length) {
    const label = periodRu(period);
    return `${label}: –ø—É—Å—Ç–æ.`;
  }
  const lines = items.slice(0, 20).map(t => {
    const mark = t.is_done ? '‚úì' : '‚Ä¢';
    const due = (t.due_ts!=null) ? ` ‚Äî ${fmtDate(t.due_ts)}` : ' ‚Äî –±—ç–∫–ª–æ–≥';
    return `${mark} ${t.title}${due}`;
  }).join('\n');
  const label = periodRu(period);
  return `${label}:\n${lines}`;
}

function periodRu(p) {
  return {
    today: '–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
    tomorrow: '–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
    week: '–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é',
    backlog: '–ë—ç–∫–ª–æ–≥',
    overdue: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ',
    all: '–í—Å–µ –∑–∞–¥–∞—á–∏'
  }[p] || '–ó–∞–¥–∞—á–∏';
}

async function fetchTasks(baseUrl, tgId) {
  const r = await fetch(`${baseUrl}/api/tasks`, { headers: headersJson(tgId) });
  if (!r.ok) throw new Error(await safeErr(r));
  const j = await r.json().catch(()=> ({}));
  return j.items || [];
}

function fuzzyFind(items, q) {
  const s = q.toLowerCase();
  // —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
  let res = items.filter(t => (t.title || '').toLowerCase().includes(s));
  if (res.length) return res;
  // –ø—Ä–æ–±—É–µ–º –ø–æ —Å–ª–æ–≤–∞–º
  const parts = s.split(/\s+/).filter(Boolean);
  if (!parts.length) return [];
  res = items.filter(t => {
    const lt = (t.title || '').toLowerCase();
    return parts.every(p => lt.includes(p));
  });
  return res;
}

/* ========================= –ò–ù–¢–ï–ù–¢–´ ========================= */

async function extractIntent(userText) {
  const t = userText.toLowerCase().trim();

  // 0) –ë—ã—Å—Ç—Ä—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –º–æ–¥–µ–ª–∏)
  // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
  if (/^(–¥–æ–±–∞–≤(—å|–∏—Ç—å)|—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å)\s+–∑–∞–¥–∞—á[–∞—É—ã]\b/.test(t)) {
    return { action: 'add_task', title: stripAddVerb(userText), due_ts: tryParseDue(userText) };
  }
  // –§–æ–∫—É—Å
  if (/^(–ø–æ—Å—Ç–∞–≤(—å|–∏—Ç—å)\s+)?—Ñ–æ–∫—É—Å( –¥–Ω—è)?\b/.test(t) || /^—Ñ–æ–∫—É—Å\b/.test(t)) {
    return { action: 'set_focus', focus_text: stripFocus(userText) };
  }
  // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
  if (/(–ø–æ–∫–∞–∂–∏|—Å–ø–∏—Å–æ–∫|–≤—ã–≤–µ–¥–∏)\s+–∑–∞–¥–∞—á/.test(t) || /\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–Ω–µ–¥–µ–ª(—é|—è|–µ)|–±—ç–∫–ª–æ–≥|–ø—Ä–æ—Å—Ä–æ—á)/.test(t)) {
    return { action: 'list_tasks', period: guessPeriod(t) };
  }
  // –£–¥–∞–ª–∏—Ç—å
  if (/(—É–¥–∞–ª–∏|—É–¥–∞–ª–∏—Ç—å|—Å–æ—Ç—Ä–∏|—Å—Ç–µ—Ä–µ—Ç—å)\s+–∑–∞–¥–∞—á[—É–∏]/.test(t)) {
    return { action: 'delete_task', query: stripDeleteVerb(userText) };
  }
  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  if (/(–∑–∞–∫—Ä–æ–π|–∑–∞–∫—Ä—ã—Ç—å|–æ—Ç–º–µ—Ç—å|–æ—Ç–º–µ—Ç–∏—Ç—å)\s+(–∫–∞–∫\s+)?(—Å–¥–µ–ª–∞–Ω|–≤—ã–ø–æ–ª–Ω–µ–Ω)/.test(t) || /(–ø–æ–º–µ—Ç—å|–ø–æ–º–µ—Ç–∏—Ç—å)\s+–∫–∞–∫\s+–≤—ã–ø–æ–ª–Ω–µ–Ω/.test(t)) {
    return { action: 'complete_task', query: stripCompleteVerb(userText) };
  }

  // 1) –ú–æ–¥–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
  const apiKey = process.env.OPENAI_API_KEY || '';
  if (!apiKey) return { action: 'reply' };

  const OpenAI = (await import('openai')).default;
  const openai = new OpenAI({ apiKey });

  const sys = [
    "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON:",
    `{ "action": "add_task|set_focus|list_tasks|delete_task|complete_task|reply",`,
    `  "title": "", "due_ts": 0, "focus_text": "", "period": "", "query": "" }`,
    "- add_task: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ title (–∫—Ä–∞—Ç–∫–æ), –¥–µ–¥–ª–∞–π–Ω –≤ due_ts (UNIX ms) –∏–ª–∏ 0",
    "- set_focus: —Ç–µ–∫—Å—Ç —Ñ–æ–∫—É—Å–∞ –≤ focus_text",
    "- list_tasks: period ‚àà {today,tomorrow,week,backlog,overdue,all}",
    "- delete_task: query ‚Äî —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞",
    "- complete_task: query ‚Äî —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞",
    "–ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî action=reply –∏ –∫—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω."
  ].join('\n');

  const user = `–¢–µ–∫—Å—Ç: """${userText}"""\n–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON.`;

  let parsed = { action: 'reply' };
  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      temperature: 0.2,
      response_format: { type: 'json_object' },
      messages: [
        { role: 'system', content: sys },
        { role: 'user', content: user }
      ]
    });
    const raw = r.choices?.[0]?.message?.content || '{}';
    parsed = JSON.parse(raw);
  } catch { /* noop */ }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  if (parsed.action === 'add_task') {
    parsed.title  = (parsed.title || '').toString().trim() || guessTitle(userText);
    const modelDue = Number(parsed.due_ts || 0);
    parsed.due_ts  = Number.isFinite(modelDue) && modelDue > 0 ? modelDue : tryParseDue(userText);
  }
  if (parsed.action === 'set_focus') {
    parsed.focus_text = (parsed.focus_text || '').toString().trim() || guessFocus(userText);
  }
  if (parsed.action === 'list_tasks') {
    parsed.period = normPeriod(parsed.period) || guessPeriod(userText);
  }
  if (parsed.action === 'delete_task' || parsed.action === 'complete_task') {
    parsed.query = (parsed.query || '').toString().trim() || guessTitle(userText);
  }

  if (!parsed.action) parsed.action = 'reply';
  return parsed;
}

/* ===== –ø–∞—Ä—Å–µ—Ä—ã —Å—Ç—Ä–æ–∫ ===== */
function stripAddVerb(s) {
  return s.replace(/^(–¥–æ–±–∞–≤(—å|–∏—Ç—å)|—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å)\s+–∑–∞–¥–∞—á[–∞—É—ã]\s*/i, '').trim();
}
function stripFocus(s) {
  return s.replace(/^(–ø–æ—Å—Ç–∞–≤(—å|–∏—Ç—å)\s+)?—Ñ–æ–∫—É—Å( –¥–Ω—è)?\s*[:-]?\s*/i, '').trim();
}
function stripDeleteVerb(s) {
  return s.replace(/^(—É–¥–∞–ª–∏(—Ç—å)?|—Å–æ—Ç—Ä–∏|—Å—Ç–µ—Ä–µ—Ç—å)\s+–∑–∞–¥–∞—á[—É—ã]\s*/i, '').trim();
}
function stripCompleteVerb(s) {
  return s.replace(/^(–∑–∞–∫—Ä–æ–π|–∑–∞–∫—Ä—ã—Ç—å|–æ—Ç–º–µ—Ç(—å|–∏—Ç—å)|–ø–æ–º–µ—Ç(—å|–∏—Ç—å))\s+(–∫–∞–∫\s+)?(—Å–¥–µ–ª–∞–Ω(–∞)?|–≤—ã–ø–æ–ª–Ω–µ–Ω(–∞)?)\s*/i, '').trim();
}
function guessTitle(s) { return s.trim().slice(0, 120); }
function guessFocus(s) { return s.trim().slice(0, 160); }
function normPeriod(p) {
  if (!p) return '';
  const m = p.toLowerCase();
  if (['today','tomorrow','week','backlog','overdue','all'].includes(m)) return m;
  return '';
}

/* ===== –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –ø–∞—Ä—Å–µ—Ä —Å—Ä–æ–∫–æ–≤ RU ===== */
function tryParseDue(text) {
  const t = text.toLowerCase();
  const now = new Date();
  let base = new Date(now);

  if (/\b—Å–µ–≥–æ–¥–Ω—è\b/.test(t)) base = new Date(now);
  else if (/\b–∑–∞–≤—Ç—Ä–∞\b/.test(t)) base = addDaysLocal(now, 1);
  else if (/\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b/.test(t)) base = addDaysLocal(now, 2);
  else {
    // –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    const dow = ['–≤—Å','–ø–Ω','–≤—Ç','—Å—Ä','—á—Ç','–ø—Ç','—Å–±'];
    const map = { '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':'–ø–Ω','–≤—Ç–æ—Ä–Ω–∏–∫':'–≤—Ç','—Å—Ä–µ–¥–∞':'—Å—Ä','—á–µ—Ç–≤–µ—Ä–≥':'—á—Ç','–ø—è—Ç–Ω–∏—Ü–∞':'–ø—Ç','—Å—É–±–±–æ—Ç–∞':'—Å–±','–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ':'–≤—Å' };
    let target = null;
    for (const w of Object.keys(map)) if (t.includes(w)) target = map[w];
    if (!target) for (const d of dow) if (new RegExp(`\\b${d}\\b`).test(t)) target = d;

    if (target) {
      const cur = now.getDay(); // 0..6 (–≤—Å..—Å–±)
      const idx = dow.indexOf(target);
      let diff = idx - cur;
      if (diff <= 0) diff += 7;
      base = addDaysLocal(now, diff);
    }
  }

  // ¬´–≤ 15:30¬ª –∏–ª–∏ ¬´–∫ 18:00¬ª
  const m = t.match(/\b(?:–≤|–∫)\s*(\d{1,2})(?::(\d{2}))?\b/);
  if (m) {
    const hh = clamp(parseInt(m[1], 10), 0, 23);
    const mm = clamp(parseInt(m[2] || '0', 10), 0, 59);
    base.setHours(hh, mm, 0, 0);
  } else {
    if (/\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b/.test(t)) base.setHours(19, 0, 0, 0);
  }
  return base.getTime();

  function addDaysLocal(d, n) { const x = new Date(d); x.setDate(x.getDate() + n); return x; }
  function clamp(n, a, b){ return Math.max(a, Math.min(b, n)); }
}

/* ===== –∫–æ—Ä–æ—Ç–∫–∏–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç-–ø–ª–∞–Ω ===== */
async function llmPlanReply(userText) {
  const apiKey = process.env.OPENAI_API_KEY || '';
  if (!apiKey) {
    return `–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –Ω–∞ —à–∞–≥–∏. –ù–∞–ø–∏—à–∏: —Ü–µ–ª—å, —Å—Ä–æ–∫ –∏ 3‚Äì5 –ø–æ–¥–∑–∞–¥–∞—á ‚Äî –ø—Ä–µ–≤—Ä–∞—â—É –≤ –∑–∞–¥–∞—á–∏ –∏ —Ñ–æ–∫—É—Å.`;
  }
  const OpenAI = (await import('openai')).default;
  const openai = new OpenAI({ apiKey });

  const sys = [
    "–¢—ã –¥–µ–ª–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
    "–§–æ—Ä–º–∞—Ç: 1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + —á–µ–∫-–ª–∏—Å—Ç –¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤ (–±—É–ª–ª–µ—Ç—ã).",
    "–ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –¥–µ–¥–ª–∞–π–Ω—ã. –ù–µ –≤–æ–¥—ã."
  ].join('\n');

  const r = await openai.chat.completions.create({
    model: 'gpt-4o-mini',
    temperature: 0.3,
    messages: [
      { role: 'system', content: sys },
      { role: 'user', content: userText }
    ]
  });

  const out = r.choices?.[0]?.message?.content?.trim();
  return out || '–ì–æ—Ç–æ–≤–æ.';
}
